    

It is perfectly possible to call the same function object with different parameters.

PyObject* py_query2 = PyObject_GetAttrString(module, "query2");
if(!py_query2){
    PyErr_Print();
    exit(-1);
}
PyObject* py_args3 = Py_BuildValue("(i)", 0);
PyObject_CallObject(py_query2, py_args3);
PyObject* py_args4 = Py_BuildValue("(i)", 1);
PyObject_CallObject(py_query2, py_args4);


====================================================================

Python
def func1(x):
    print("func1")
    print(x)


def func2(x):
    print("func2")
    for i in x:
        print(i)

C++
PyObject* py_args0;
    PyObject* py_func1;
    PyObject* py_func2;
    py_func1 = PyObject_GetAttrString(module, "func1");
    py_func2 = PyObject_GetAttrString(module, "func2");
    
    PyObject_CallObject(py_func1, NULL); //Nothing
    PyObject_CallObject(py_func2, NULL); //Nothing
    
    py_func1 = PyObject_GetAttrString(module, "func1");
    py_func2 = PyObject_GetAttrString(module, "func2");
    py_args0 = Py_BuildValue("i", 0);
    PyObject_CallObject(py_func1, py_args0); //Nothing
    PyObject_CallObject(py_func2, py_args0); //Nothing
    
    py_func1 = PyObject_GetAttrString(module, "func1");
    py_func2 = PyObject_GetAttrString(module, "func2");
    py_args0 = Py_BuildValue("(i)", 1);
    PyObject_CallObject(py_func1, py_args0); //func1 1
    PyObject_CallObject(py_func2, py_args0); //func2
    
    py_func1 = PyObject_GetAttrString(module, "func1");
    py_func2 = PyObject_GetAttrString(module, "func2");
    py_args0 = Py_BuildValue("ii", 2, 3);
    PyObject_CallObject(py_func1, py_args0); //Nothing
    PyObject_CallObject(py_func2, py_args0); //Nothing
    
    py_func1 = PyObject_GetAttrString(module, "func1");
    py_func2 = PyObject_GetAttrString(module, "func2");
    py_args0 = Py_BuildValue("(ii)", 4, 5);
    PyObject_CallObject(py_func1, py_args0); //Nothing
    PyObject_CallObject(py_func2, py_args0); //Nothing
    
    py_func1 = PyObject_GetAttrString(module, "func1");
    py_func2 = PyObject_GetAttrString(module, "func2");
    py_args0 = Py_BuildValue("[i]", 6, 7);
    PyObject_CallObject(py_func1, py_args0); //Nothing
    PyObject_CallObject(py_func2, py_args0); //Nothing
    
    py_func1 = PyObject_GetAttrString(module, "func1");
    py_func2 = PyObject_GetAttrString(module, "func2");
    py_args0 = Py_BuildValue("[ii]", 8, 9);
    PyObject_CallObject(py_func1, py_args0); //Nothing
    PyObject_CallObject(py_func2, py_args0); //Nothing


UPDATE
======================================================================

IMPORTANT: use PyTuple_Pack before passing the arguments.

def func3(x):
    print("func3")
    print(type(x))

PyObject* py_args0;
    PyObject* py_args1;
    PyObject* py_func1;
    PyObject* py_func2;
    PyObject* py_func3;
    py_func1 = PyObject_GetAttrString(module, "func1");
    py_func2 = PyObject_GetAttrString(module, "func2");
    py_func3 = PyObject_GetAttrString(module, "func3");

    PyObject_CallObject(py_func1, NULL); //Nothing
    PyObject_CallObject(py_func2, NULL); //Nothing
    PyObject_CallObject(py_func3, NULL); //Nothing

    py_func1 = PyObject_GetAttrString(module, "func1");
    py_func2 = PyObject_GetAttrString(module, "func2");
    py_args0 = Py_BuildValue("i", 0);
    py_args1 = PyTuple_Pack(1, py_args0);
    PyObject_CallObject(py_func1, py_args1); //func1 0
    PyObject_CallObject(py_func2, py_args1); //func2
    PyObject_CallObject(py_func3, py_args1); //Nothing

    py_func1 = PyObject_GetAttrString(module, "func1");
    py_func2 = PyObject_GetAttrString(module, "func2");
    py_args0 = Py_BuildValue("(i)", 1);
    py_args1 = PyTuple_Pack(1, py_args0);
    PyObject_CallObject(py_func1, py_args1); //func3func1 (1,)
    PyObject_CallObject(py_func2, py_args1); //func2 1
    PyObject_CallObject(py_func3, py_args1); //func3 <class 'tuple'>

    py_func1 = PyObject_GetAttrString(module, "func1");
    py_func2 = PyObject_GetAttrString(module, "func2");
    py_args0 = Py_BuildValue("ii", 2, 3);
    py_args1 = PyTuple_Pack(1, py_args0);
    PyObject_CallObject(py_func1, py_args1); //func1 (2, 3)
    PyObject_CallObject(py_func2, py_args1); //func2 2 3
    PyObject_CallObject(py_func3, py_args1); //func3 <class 'tuple'>

    py_func1 = PyObject_GetAttrString(module, "func1");
    py_func2 = PyObject_GetAttrString(module, "func2");
    py_args0 = Py_BuildValue("(ii)", 4, 5);
    py_args1 = PyTuple_Pack(1, py_args0);
    PyObject_CallObject(py_func1, py_args1); //func1 (4, 5)
    PyObject_CallObject(py_func2, py_args1); //func2 4 5
    PyObject_CallObject(py_func3, py_args1); //func3 <class 'tuple'>

    py_func1 = PyObject_GetAttrString(module, "func1");
    py_func2 = PyObject_GetAttrString(module, "func2");
    py_args0 = Py_BuildValue("[i]", 6);
    py_args1 = PyTuple_Pack(1, py_args0);
    PyObject_CallObject(py_func1, py_args1); //func1 [6]
    PyObject_CallObject(py_func2, py_args1); //func2 6
    PyObject_CallObject(py_func3, py_args1); //func3 <class 'list'>

    py_func1 = PyObject_GetAttrString(module, "func1");
    py_func2 = PyObject_GetAttrString(module, "func2");
    py_args0 = Py_BuildValue("[ii]", 8, 9);
    py_args1 = PyTuple_Pack(1, py_args0);
    PyObject_CallObject(py_func1, py_args1); //func1 [8, 9]
    PyObject_CallObject(py_func2, py_args1); //func2 8 9
    PyObject_CallObject(py_func3, py_args1); //func3 <class 'list'>
    